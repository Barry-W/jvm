第七章 虚拟机类加载机制

概述：
虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。


类加载时机
类加载从内存开始到结束，整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。
其中，加载、验证、准备、初始化、和卸载这五个阶段的顺序是确定的。

其中，虚拟机初始化限定条件为：
1.遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行初始化，则需要先触发其初始化。
2.使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有初始化，则需要先触发其父类的初始化。
3.当初始化一个类的时候，如果发现其父类还没有初始化，需要先触发其父类初始化。
4.当虚拟机启动时，用户需要指定一个执行的主类，虚拟机会先初始化这个类。

加载：
加载阶段是“类加载”过程的一个阶段，在此阶段虚拟机需完成：
a.通过一个类的全限定名来获取定义此类的二进制字节流。
b.将这个字节流所代表的静态存储结构转化为方法区运行时数据结构。
c.在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。

加载阶段（加载中获取二进制字节流的动作），是开发期可控性最强的阶段。

验证：
1.验证文件格式；
2.元数据验证；
3.字节码验证；
4.符号引用验证；

准备：
准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区进行分配。

通常情况下，静态数据类型的值为初始值（如int为0),但但又final修饰时，则表示ConstantValue属性，在编译时Javac将会为value生成ConstantValue属性，在准备
阶段虚拟机就会根据ConstantValue的设置将value赋值为123

解析：
















