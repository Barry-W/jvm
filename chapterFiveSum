第五章  调优案例分析与实战

    5.1 概述
        案例分析记录作者遇到并处理过的性能问题及来源于网上有特色和代表性的案例总结。
    
    5.2 案例分析
    
      5.2.1 高性能硬件上的程序部署策略
        现象：15万pv/天左右的在线文档类型网站更换硬件系统，新的硬件为4个CPU、16G物理内存，系统64位CentOS5.4，Resin为web服务器，JDK为64位1.5，设置
        -Xmx和-xms参数固定在12GB；
        
        结果：不理想，不定期出现长时间没有响应；
        
        分析：无响应由GC导致。虚拟机运行在Server模式，默认使用吞吐量优先收集器，回收12GB堆，Full GC耗时长达14s。由于程序设计，文档从磁盘中提取到内存，
        导致文档序列号产生大对象，许多大对象进入老年代，没有在Minor GC中回收。
        
        解决方式：
            1.通过64位JDK来使用大内存；
            2.使用若干个32位虚拟机建立逻辑群来利用硬件资源。
        
      
      5.2.2 集群间同步导致的内存溢出
        现象：基于B/S的MIS系统，硬件，CPU*2，内存8G，服务器WebLogic9.2.每台机器启动3个weblogic实例，构成6个节点亲合式集群。
        
        结果：由于session没同步，有数据需要共享，使用JBossCache建立全局缓存。之后出现不定期内存溢出
        
        分析：JBossCache基于其JGroups进行集群间数据通信，使用协议栈的方式来实现收发数据包的各种所需特性的自有组合，数据包接受和发送要经过每层协议栈
        的up()和down()方法。由于MIS服务端有一个负责安全校验的全局Filter，接受请求会更新操作时间并同步到所有节点中，使用户在一段时间不能在多台机器上
        登陆。同时服务过程中，一个页面会产生多次请求。
        
        解决方式：JBsossCache和MIS系统实现都存在缺陷。
        
      
      5.2.3 堆外内存导致的溢出错误
        现象：B/S考试系统，使用逆向AJAX技术，服务器Jetty7.1.4，硬件为普通PC机，4GB内存，32位操作系统
        
        结果：服务端不定时抛出内存异常
        
        分析：32Windows平台限制为2GB，其中java堆为1.6GB，Direct Memory并不算在1.6GB堆之内，因此只能在剩余的0.4GB空间中分出一部分。Direct Memory
        无法和新生代及老年代一样，发现空间不足会通知收集器进行垃圾回收，只能等待老年代满了之后Full GC，再“顺便”清理掉内存的废弃对象。本案例使用CometD
        1.1.1框架，有大量NIO操作需要用到Direct Memory。
        
        解决方式：Direct Memory通过-XX：MaxDirectMemorySize调整大小，内存不足时抛出OutOfMemoryError或OutOfMemoryError：Direct buffer memory
      
      5.2.4 外部命令导致系统缓慢
        
        现象：数字校园应用系统，CPU使用率很高，且绝大多数CPU资源的程序非应用本身。
        
        结果：fork系统调用，产生新进程
        
        分析：每个用户请求处理都需执行一个外部shell脚本来获得系统信息。执行shell脚本通过Java中Runtime.getRuntime().exec()方法调用。该方法可以实现
        调用，但所耗资源过多。Java虚拟机执行的过程：克隆和当前相同环境变量的进程，再用新的进程去执行外部命令，最后退出进程。频繁操作，系统消耗很大。
        
        解决方式：去掉shell脚本执行语句，改为使用Java的API获取信息。
        
      
      5.2.5 服务器JVM进程崩溃
        现象：基于B/S的MIS系统，2个CPU、8GB内存，服务器WebLogic9.2.正常运行后，发现运行期间频繁出现集群节点的虚拟机进程自动关闭现象，留下
        hs_err_pid###.log文件。
        
        结果：系统最近与OA门户做了集成，Web服务通知OA门户系统，把待办事项的变化同步到OA门户中，但测试时，耗时长，连接中断。
        
        分析：MIS系统用户多，待办事项变化快，使用异步调用web服务，由于两边服务速度完全不对等，时间长积累越多web服务没有调用，导致等待的线程和Socket
        连接越来越多，超过虚拟机承受的能力后崩溃。
        
        解决方式：
        
        
        
        
    5.3 实战：Eclipse运行速度调优
    
      5.3.1 调优前的程序运行状态
      
      5.3.2 升级JDK1.6的性能变化及兼容问题
      
      5.3.3 编译时间和类加载时间的优化
      
      5.3.4 调整内存设置控制垃圾收集频率
      
      5.3.5 选择收集器降低延迟
      
      
    5.4 本章小结
      
      
      



     





















